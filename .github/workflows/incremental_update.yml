name: Hourly Incremental Update

on:
  schedule:
    - cron:  '15 * * * *'
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: obscenecommits # set this to your application's name
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'functions' # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '14.x'
  FRONTEND_DEPLOY_PATH: 'obscenecommits'

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: build_environment

    steps:
    - uses: actions/checkout@main

    - name: Get current time
      uses: 1466587594/get-current-time@v2
      id: current-time

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    
    - name: Cache Archives
      uses: actions/cache@v2
      env:
        cache-name: cache-archives-v2
        YEAR: "${{ steps.current-time.outputs.year }}"
        MONTH: "${{ steps.current-time.outputs.month }}"
        DAY: "${{ steps.current-time.outputs.day }}"
        HOUR: "${{ steps.current-time.outputs.hour }}"
      with:
        path: archives
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.YEAR }}-${{ env.MONTH }}-${{ env.DAY }}-${{ env.HOUR }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.YEAR }}-${{ env.MONTH }}-${{ env.DAY }}-
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.YEAR }}-${{ env.MONTH }}-
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.YEAR }}-
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - run: npm ci

    - run: npm run build:prod
      env:
        ACCOUNT_NAME: ${{ secrets.ACCOUNT_NAME }}
        ACCOUNT_KEY: ${{ secrets.ACCOUNT_KEY }}
        CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}

    - uses: azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true
    
    - name: Upload to blob storage
      uses: azure/powershell@v1
      with:
        azPSVersion: latest
        inlineScript: |
          $staticAssetCacheControl = "public, max-age=31536000, immutable"
          $revalidateAssetCacheControl = "no-cache"
          $properties = @{
            ".css" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "text/css"
            }
            ".js" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "application/javascript"
            }
            ".woff2" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "font/woff2"
            }
            ".jpg" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "image/jpeg"
            }
            ".png" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "image/png"
            }
            ".svg" = @{
              CacheControl = $staticAssetCacheControl
              ContentType = "image/svg+xml"
            }
            ".html" = @{
              CacheControl = $revalidateAssetCacheControl
              ContentType = "text/html"
            }
          }
          cd _site
          Set-AzCurrentStorageAccount -ResourceGroupName ${{ secrets.RESOURCE_GROUP_NAME }} -Name ${{ secrets.STORAGE_ACCOUNT_NAME }}
          $blobs = (Get-AzStorageContainer -Container '$web' | Get-AzStorageBlob -Blob "${{ env.FRONTEND_DEPLOY_PATH }}/page/*").Name.substring("${{ env.FRONTEND_DEPLOY_PATH }}/".length)
          $localFiles = (Get-ChildItem -Recurse -File -Path 'page') + (Get-ChildItem 'index.html')
          $localFiles |
            Foreach-Object {
              $relativePath = ($_ | Resolve-Path -Relative).substring(2)
              if(!($relativePath -in $blobs)) {
                $fileProperties = $properties[$_.extension]
                if($fileProperties) {
                  Set-AzStorageBlobContent -File $_.fullName -Blob ${{ env.FRONTEND_DEPLOY_PATH }}/$relativePath -Container '$web' -properties $fileProperties -Force
                } else {
                  Set-AzStorageBlobContent -File $_.fullName -Blob ${{ env.FRONTEND_DEPLOY_PATH }}/$relativePath -Container '$web' -Force
                }
              }
            }
